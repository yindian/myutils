diff -ur comix-4.0.4/src/archive.py /usr/share/comix/src/archive.py
--- comix-4.0.4/src/archive.py	2009-04-04 01:11:43.000000000 +0800
+++ /usr/share/comix/src/archive.py	2015-09-28 15:58:10.747196061 +0800
@@ -3,17 +3,24 @@
 import sys
 import os
 import re
-import zipfile
+try:
+    import czipfile as zipfile
+except:
+    import zipfile
 import tarfile
 import threading
 
 import gtk
 
 import process
+import time
 
 ZIP, RAR, TAR, GZIP, BZIP2 = range(5)
+P7ZIP = 5
 
 _rar_exec = None
+_7z_exec = None
+_last_pass = ""
 
 
 class Extractor:
@@ -48,9 +55,33 @@
         self._stop = False
         self._extract_thread = None
         self._condition = threading.Condition()
+        self._rarpass = '-p-'
+	global _last_pass
 
         if self._type == ZIP:
             self._zfile = zipfile.ZipFile(src, 'r')
+	    need_pass = False
+	    for info in self._zfile.infolist():
+		    if info.flag_bits & 0x1:
+			    need_pass = True
+			    break
+            if need_pass:
+                print >> sys.stderr, "You need password for ", src
+                dialog = gtk.MessageDialog(None, 0, gtk.MESSAGE_QUESTION,
+                        gtk.BUTTONS_OK_CANCEL,
+                        _("Enter password:"))
+                entry = gtk.Entry()
+                entry.set_text(_last_pass)
+                entry.show()
+                dialog.vbox.pack_end(entry)
+                entry.connect('activate', lambda _: dialog.response(gtk.RESPONSE_OK))
+                dialog.set_default_response(gtk.RESPONSE_OK)
+                ret = dialog.run()
+                text = entry.get_text()
+                dialog.destroy()
+                if ret == gtk.RESPONSE_OK:
+			self._zfile.setpassword(text)
+			_last_pass = text
             self._files = self._zfile.namelist()
         elif self._type in (TAR, GZIP, BZIP2):
             self._tfile = tarfile.open(src, 'r')
@@ -69,11 +100,91 @@
                     dialog.run()
                     dialog.destroy()
                     return None
-            proc = process.Process([_rar_exec, 'vb', '--', src])
+            need_pass = False
+            proc = process.Process([_rar_exec, 'l', '-p-', '--', src])
+            fd = proc.spawn()
+            for line in fd.readlines():
+                if line and line[0] in '*C' and (line.startswith('*') or line.startswith('CRC') or line.startswith('Checksum')):
+                    need_pass = True
+                    break
+            fd.close()
+            proc.wait()
+            if need_pass:
+                print >> sys.stderr, "You need password for ", src
+                dialog = gtk.MessageDialog(None, 0, gtk.MESSAGE_QUESTION,
+                        gtk.BUTTONS_OK_CANCEL,
+                        _("Enter password:"))
+                entry = gtk.Entry()
+                entry.set_text(_last_pass)
+                entry.show()
+                dialog.vbox.pack_end(entry)
+                entry.connect('activate', lambda _: dialog.response(gtk.RESPONSE_OK))
+                dialog.set_default_response(gtk.RESPONSE_OK)
+                ret = dialog.run()
+                text = entry.get_text()
+                dialog.destroy()
+                if ret == gtk.RESPONSE_OK:
+                    self._rarpass = '-p' + text
+		    _last_pass = text
+            proc = process.Process([_rar_exec, 'vb', self._rarpass, '--', src])
             fd = proc.spawn()
             self._files = [name.rstrip(os.linesep) for name in fd.readlines()]
             fd.close()
             proc.wait()
+        elif self._type == P7ZIP:
+            global _7z_exec
+            if _7z_exec is None:
+                _7z_exec = _get_7z_exec()
+                if _7z_exec is None:
+                    print '! Could not find 7z file extractor.'
+                    dialog = gtk.MessageDialog(None, 0, gtk.MESSAGE_WARNING,
+                        gtk.BUTTONS_CLOSE,
+                        _("Could not find 7z file extractor!"))
+                    dialog.format_secondary_markup(
+                        _("You need either the <i>7z</i> or the <i>7za</i> program installed in order to read 7z files."))
+                    dialog.run()
+                    dialog.destroy()
+                    return None
+            need_pass = False
+            proc = process.Process([_7z_exec, 'l', '-slt', '-p-', src])
+            fd = proc.spawn()
+            self._files = []
+            for line in fd:
+                if line.startswith('Path = '):
+                    self._files.append(line[7:-1])
+                elif line.startswith('Encrypted = +'):
+                    need_pass = True
+                elif line.endswith('Wrong password?\n'):
+                    need_pass = True
+                    self._files = []
+                    break
+            fd.close()
+            proc.wait()
+            if need_pass:
+                print >> sys.stderr, "You need password for ", src
+                dialog = gtk.MessageDialog(None, 0, gtk.MESSAGE_QUESTION,
+                        gtk.BUTTONS_OK_CANCEL,
+                        _("Enter password:"))
+                entry = gtk.Entry()
+                entry.set_text(_last_pass)
+                entry.show()
+                dialog.vbox.pack_end(entry)
+                entry.connect('activate', lambda _: dialog.response(gtk.RESPONSE_OK))
+                dialog.set_default_response(gtk.RESPONSE_OK)
+                ret = dialog.run()
+                text = entry.get_text()
+                dialog.destroy()
+                if ret == gtk.RESPONSE_OK:
+                    self._rarpass = '-p' + text
+		    _last_pass = text
+                    if not self._files:
+                        proc = process.Process([_7z_exec, 'l', '-slt', self._rarpass, src])
+                        fd = proc.spawn()
+                        for line in fd:
+                            if line.startswith('Path = '):
+                                self._files.append(line[7:-1])
+                        fd.close()
+                        proc.wait()
         else:
             print '! Non-supported archive format:', src
             return None
@@ -173,12 +284,40 @@
                     print '! Non-local tar member:', name, '\n'
             elif self._type == RAR:
                 if _rar_exec is not None:
-                    proc = process.Process([_rar_exec, 'x', '-kb', '-p-',
+                    proc = process.Process([_rar_exec, 'x', '-kb', self._rarpass,
                         '-o-', '-inul', '--', self._src, name, self._dst])
                     proc.spawn()
                     proc.wait()
                 else:
                     print '! Could not find RAR file extractor.'
+            elif self._type == P7ZIP:
+                if self.is_ready(name):
+                    return
+                if _7z_exec is not None:
+                    proc = process.Process([_7z_exec, 'x', self._rarpass,
+                        '-y', '-bd', '-o' + self._dst, self._src]) #, name
+                    fd = proc.spawn()
+                    line = fd.readline()
+                    count = 0
+                    while line:
+                        if line.startswith('Extracting  '):
+                            self._condition.acquire()
+			    fname = line[12:-1]
+			    if fname.endswith('     Data Error in encrypted file. Wrong password?'):
+				    fname = fname[:-50]
+                            self._extracted[fname] = True
+                            self._condition.notify()
+                            self._condition.release()
+                            if count == 10:
+                                count = 0
+                                time.sleep(0.1)
+                            else:
+                                count += 1
+                        line = fd.readline()
+                    proc.wait()
+                    return
+                else:
+                    print '! Could not find 7z file extractor.'
         except Exception:
             # Better to ignore any failed extractions (e.g. from a corrupt
             # archive) than to crash here and leave the main thread in a
@@ -296,6 +435,8 @@
                 return TAR
             if magic == 'Rar!':
                 return RAR
+            if magic == '7z\xBC\xAF':
+                return P7ZIP
     except Exception:
         print '! Error while reading', path
     return None
@@ -335,3 +476,12 @@
         if process.Process([command]).spawn() is not None:
             return command
     return None
+
+def _get_7z_exec():
+    """Return the name of the 7z file extractor executable, or None if
+    no such executable is found.
+    """
+    for command in ('7z', '7za'):
+        if process.Process([command]).spawn() is not None:
+            return command
+    return None
diff -ur comix-4.0.4/src/filehandler.py /usr/share/comix/src/filehandler.py
--- comix-4.0.4/src/filehandler.py	2009-01-12 04:54:42.000000000 +0800
+++ /usr/share/comix/src/filehandler.py	2015-09-05 15:15:53.811243262 +0800
@@ -47,7 +47,7 @@
         self._name_table = {}
         self._extractor = archive.Extractor()
         self._condition = None
-        self._image_re = re.compile(r'\.(jpg|jpeg|png|gif|tif|tiff)\s*$', re.I)
+        self._image_re = re.compile(r'\.(jpg|jpeg|png|gif|bmp|tif|tiff)\s*$', re.I)
         self.update_comment_extensions()
 
     def _get_pixbuf(self, index):
@@ -57,7 +57,7 @@
         if index not in self._raw_pixbufs:
             self._wait_on_page(index + 1)
             try:
-                self._raw_pixbufs[index] = gtk.gdk.pixbuf_new_from_file(
+                self._raw_pixbufs[index] = gtk.gdk.PixbufAnimation(
                     self._image_files[index])
             except Exception:
                 self._raw_pixbufs[index] = self._get_missing_image()
@@ -278,7 +278,8 @@
                 fpath = os.path.join(self._base_path, f)
                 if is_image_file(fpath):
                     self._image_files.append(fpath)
-            self._image_files.sort(locale.strcoll)
+            #self._image_files.sort(locale.strcoll)
+            alphanumeric_sort(self._image_files)
             self._current_image_index = self._image_files.index(path)
 
         if not self._image_files:
@@ -554,6 +555,12 @@
         if s.isdigit():
             return int(s)
         return s.lower()
+    def _convert_utf8(s):
+        if type(s) == unicode:
+            return s.encode('utf-8')
+        return s
 
     rec = re.compile("\d+|\D+")
-    filenames.sort(key=lambda s: map(_format_substring, rec.findall(s)))
+    prefix = os.path.commonprefix([_convert_utf8(s) for s in filenames])
+    prefixlen = len(prefix)
+    filenames.sort(key=lambda s: map(_format_substring, rec.findall(_convert_utf8(s)[prefixlen:])))
diff -ur comix-4.0.4/src/lens.py /usr/share/comix/src/lens.py
--- comix-4.0.4/src/lens.py	2009-01-12 04:32:30.000000000 +0800
+++ /usr/share/comix/src/lens.py	2015-05-16 17:18:37.618044157 +0800
@@ -58,6 +58,10 @@
             else:
                 l_source_pixbuf, r_source_pixbuf = \
                     self._window.file_handler.get_pixbufs()
+            if hasattr(l_source_pixbuf, 'get_static_image'):
+                l_source_pixbuf = l_source_pixbuf.get_static_image()
+            if hasattr(r_source_pixbuf, 'get_static_image'):
+                r_source_pixbuf = r_source_pixbuf.get_static_image()
             l_image_size = self._window.left_image.size_request()
             r_image_size = self._window.right_image.size_request()
             self._add_subpixbuf(canvas, x, y, l_image_size, l_source_pixbuf,
@@ -66,6 +70,8 @@
                 l_image_size[0], left=False)
         else:
             source_pixbuf = self._window.file_handler.get_pixbufs()
+            if hasattr(source_pixbuf, 'get_static_image'):
+                source_pixbuf = source_pixbuf.get_static_image()
             image_size = self._window.left_image.size_request()
             self._add_subpixbuf(canvas, x, y, image_size, source_pixbuf)
         return image.add_border(canvas, 1)
diff -ur comix-4.0.4/src/main.py /usr/share/comix/src/main.py
--- comix-4.0.4/src/main.py	2009-02-22 23:50:40.000000000 +0800
+++ /usr/share/comix/src/main.py	2015-05-16 17:21:07.202785914 +0800
@@ -222,6 +222,10 @@
 
         if self.displayed_double():
             left_pixbuf, right_pixbuf = self.file_handler.get_pixbufs()
+            if hasattr(left_pixbuf, 'get_static_image'):
+                left_pixbuf = left_pixbuf.get_static_image()
+            if hasattr(right_pixbuf, 'get_static_image'):
+                right_pixbuf = right_pixbuf.get_static_image()
             if self.is_manga_mode:
                 right_pixbuf, left_pixbuf = left_pixbuf, right_pixbuf
             left_unscaled_x = left_pixbuf.get_width()
@@ -299,7 +303,10 @@
 
             rotation = prefs['rotation']
             if prefs['auto rotate from exif']:
-                rotation += image.get_implied_rotation(pixbuf)
+                if hasattr(pixbuf, 'get_static_image'):
+                    rotation += image.get_implied_rotation(pixbuf.get_static_image())
+                else:
+                    rotation += image.get_implied_rotation(pixbuf)
                 rotation = rotation % 360
 
             if self.zoom_mode == preferences.ZOOM_MODE_MANUAL:
@@ -309,15 +316,20 @@
                     scaled_width, scaled_height = scaled_height, scaled_width
                 scale_up = True
             
-            pixbuf = image.fit_in_rectangle(pixbuf, scaled_width,
-                scaled_height, scale_up=scale_up, rotation=rotation)
-            if prefs['horizontal flip']:
-                pixbuf = pixbuf.flip(horizontal=True)
-            if prefs['vertical flip']:
-                pixbuf = pixbuf.flip(horizontal=False)
-            pixbuf = self.enhancer.enhance(pixbuf)
+            if not hasattr(pixbuf, 'is_static_image') or pixbuf.is_static_image():
+                if hasattr(pixbuf, 'get_static_image'):
+                    pixbuf = pixbuf.get_static_image()
+                pixbuf = image.fit_in_rectangle(pixbuf, scaled_width,
+                    scaled_height, scale_up=scale_up, rotation=rotation)
+                if prefs['horizontal flip']:
+                    pixbuf = pixbuf.flip(horizontal=True)
+                if prefs['vertical flip']:
+                    pixbuf = pixbuf.flip(horizontal=False)
+                pixbuf = self.enhancer.enhance(pixbuf)
 
-            self.left_image.set_from_pixbuf(pixbuf)
+                self.left_image.set_from_pixbuf(pixbuf)
+            else:
+                self.left_image.set_from_animation(pixbuf)
             self.right_image.clear()
             x_padding = (area_width - pixbuf.get_width()) / 2
             y_padding = (area_height - pixbuf.get_height()) / 2
diff -ur comix-4.0.4/src/process.py /usr/share/comix/src/process.py
--- comix-4.0.4/src/process.py	2008-11-10 06:17:46.000000000 +0800
+++ /usr/share/comix/src/process.py	2015-02-03 23:03:34.768534087 +0800
@@ -27,7 +27,7 @@
         (NOTE: separate function to make python2.4 exception syntax happy)
         """
         try:
-            self._proc = subprocess.Popen(self._args, stdout=subprocess.PIPE)
+            self._proc = subprocess.Popen(self._args, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)
             return self._proc.stdout
         except Exception:
             return None
diff -ur comix-4.0.4/src/thumbnail.py /usr/share/comix/src/thumbnail.py
--- comix-4.0.4/src/thumbnail.py	2008-12-13 00:04:28.000000000 +0800
+++ /usr/share/comix/src/thumbnail.py	2015-02-03 23:04:03.952533601 +0800
@@ -154,6 +154,8 @@
 
 
 def _path_to_thumbpath(path, dst_dir):
+    if type(path) == unicode:
+        path = path.encode('utf-8')
     uri = 'file://' + pathname2url(os.path.normpath(path))
     return _uri_to_thumbpath(uri, dst_dir)
 
