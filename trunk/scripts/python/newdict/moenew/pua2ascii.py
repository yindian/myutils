#!/usr/bin/env python
try:
	import psyco
	psyco.full()
except:
	pass
big5coderange = (
(0xA140, 0xA17E ),
(0xA1A1, 0xA1FE ),
(0xA240, 0xA27E ),
(0xA2A1, 0xA2FE ),
(0xA340, 0xA37E ),
(0xA3A1, 0xA3BF ),
(0xA3E1, 0xA3E1 ),
(0xA440, 0xA47E ),
(0xA4A1, 0xA4FE ),
(0xA540, 0xA57E ),
(0xA5A1, 0xA5FE ),
(0xA640, 0xA67E ),
(0xA6A1, 0xA6FE ),
(0xA740, 0xA77E ),
(0xA7A1, 0xA7FE ),
(0xA840, 0xA87E ),
(0xA8A1, 0xA8FE ),
(0xA940, 0xA97E ),
(0xA9A1, 0xA9FE ),
(0xAA40, 0xAA7E ),
(0xAAA1, 0xAAFE ),
(0xAB40, 0xAB7E ),
(0xABA1, 0xABFE ),
(0xAC40, 0xAC7E ),
(0xACA1, 0xACFE ),
(0xAD40, 0xAD7E ),
(0xADA1, 0xADFE ),
(0xAE40, 0xAE7E ),
(0xAEA1, 0xAEFE ),
(0xAF40, 0xAF7E ),
(0xAFA1, 0xAFFE ),
(0xB040, 0xB07E ),
(0xB0A1, 0xB0FE ),
(0xB140, 0xB17E ),
(0xB1A1, 0xB1FE ),
(0xB240, 0xB27E ),
(0xB2A1, 0xB2FE ),
(0xB340, 0xB37E ),
(0xB3A1, 0xB3FE ),
(0xB440, 0xB47E ),
(0xB4A1, 0xB4FE ),
(0xB540, 0xB57E ),
(0xB5A1, 0xB5FE ),
(0xB640, 0xB67E ),
(0xB6A1, 0xB6FE ),
(0xB740, 0xB77E ),
(0xB7A1, 0xB7FE ),
(0xB840, 0xB87E ),
(0xB8A1, 0xB8FE ),
(0xB940, 0xB97E ),
(0xB9A1, 0xB9FE ),
(0xBA40, 0xBA7E ),
(0xBAA1, 0xBAFE ),
(0xBB40, 0xBB7E ),
(0xBBA1, 0xBBFE ),
(0xBC40, 0xBC7E ),
(0xBCA1, 0xBCFE ),
(0xBD40, 0xBD7E ),
(0xBDA1, 0xBDFE ),
(0xBE40, 0xBE7E ),
(0xBEA1, 0xBEFE ),
(0xBF40, 0xBF7E ),
(0xBFA1, 0xBFFE ),
(0xC040, 0xC07E ),
(0xC0A1, 0xC0FE ),
(0xC140, 0xC17E ),
(0xC1A1, 0xC1FE ),
(0xC240, 0xC27E ),
(0xC2A1, 0xC2FE ),
(0xC340, 0xC37E ),
(0xC3A1, 0xC3FE ),
(0xC440, 0xC47E ),
(0xC4A1, 0xC4FE ),
(0xC540, 0xC57E ),
(0xC5A1, 0xC5FE ),
(0xC640, 0xC67E ),
(0xC6A1, 0xC6FE ),
(0xC740, 0xC77E ),
(0xC7A1, 0xC7FE ),
(0xC840, 0xC87E ),
(0xC8A1, 0xC8F1 ),
(0xC8F5, 0xC8FE ),
(0xC940, 0xC97E ),
(0xC9A1, 0xC9FE ),
(0xCA40, 0xCA7E ),
(0xCAA1, 0xCAFE ),
(0xCB40, 0xCB7E ),
(0xCBA1, 0xCBFE ),
(0xCC40, 0xCC7E ),
(0xCCA1, 0xCCFE ),
(0xCD40, 0xCD7E ),
(0xCDA1, 0xCDFE ),
(0xCE40, 0xCE7E ),
(0xCEA1, 0xCEFE ),
(0xCF40, 0xCF7E ),
(0xCFA1, 0xCFFE ),
(0xD040, 0xD07E ),
(0xD0A1, 0xD0FE ),
(0xD140, 0xD17E ),
(0xD1A1, 0xD1FE ),
(0xD240, 0xD27E ),
(0xD2A1, 0xD2FE ),
(0xD340, 0xD37E ),
(0xD3A1, 0xD3FE ),
(0xD440, 0xD47E ),
(0xD4A1, 0xD4FE ),
(0xD540, 0xD57E ),
(0xD5A1, 0xD5FE ),
(0xD640, 0xD67E ),
(0xD6A1, 0xD6FE ),
(0xD740, 0xD77E ),
(0xD7A1, 0xD7FE ),
(0xD840, 0xD87E ),
(0xD8A1, 0xD8FE ),
(0xD940, 0xD97E ),
(0xD9A1, 0xD9FE ),
(0xDA40, 0xDA7E ),
(0xDAA1, 0xDAFE ),
(0xDB40, 0xDB7E ),
(0xDBA1, 0xDBFE ),
(0xDC40, 0xDC7E ),
(0xDCA1, 0xDCFE ),
(0xDD40, 0xDD7E ),
(0xDDA1, 0xDDFE ),
(0xDE40, 0xDE7E ),
(0xDEA1, 0xDEFE ),
(0xDF40, 0xDF7E ),
(0xDFA1, 0xDFFE ),
(0xE040, 0xE07E ),
(0xE0A1, 0xE0FE ),
(0xE140, 0xE17E ),
(0xE1A1, 0xE1FE ),
(0xE240, 0xE27E ),
(0xE2A1, 0xE2FE ),
(0xE340, 0xE37E ),
(0xE3A1, 0xE3FE ),
(0xE440, 0xE47E ),
(0xE4A1, 0xE4FE ),
(0xE540, 0xE57E ),
(0xE5A1, 0xE5FE ),
(0xE640, 0xE67E ),
(0xE6A1, 0xE6FE ),
(0xE740, 0xE77E ),
(0xE7A1, 0xE7FE ),
(0xE840, 0xE87E ),
(0xE8A1, 0xE8FE ),
(0xE940, 0xE97E ),
(0xE9A1, 0xE9FE ),
(0xEA40, 0xEA7E ),
(0xEAA1, 0xEAFE ),
(0xEB40, 0xEB7E ),
(0xEBA1, 0xEBFE ),
(0xEC40, 0xEC7E ),
(0xECA1, 0xECFE ),
(0xED40, 0xED7E ),
(0xEDA1, 0xEDFE ),
(0xEE40, 0xEE7E ),
(0xEEA1, 0xEEFE ),
(0xEF40, 0xEF7E ),
(0xEFA1, 0xEFFE ),
(0xF040, 0xF07E ),
(0xF0A1, 0xF0FE ),
(0xF140, 0xF17E ),
(0xF1A1, 0xF1FE ),
(0xF240, 0xF27E ),
(0xF2A1, 0xF2FE ),
(0xF340, 0xF37E ),
(0xF3A1, 0xF3FE ),
(0xF440, 0xF47E ),
(0xF4A1, 0xF4FE ),
(0xF540, 0xF57E ),
(0xF5A1, 0xF5FE ),
(0xF640, 0xF67E ),
(0xF6A1, 0xF6FE ),
(0xF740, 0xF77E ),
(0xF7A1, 0xF7FE ),
(0xF840, 0xF87E ),
(0xF8A1, 0xF8FE ),
(0xF940, 0xF97E ),
(0xF9A1, 0xF9FE ),
)
big5 = {}
for a, b in big5coderange:
	for i in range(a, b+1):
		big5[i] = True

import sys
assert len(sys.argv) == 2
buf = open(sys.argv[1], 'r').read()
i = 0
while i < len(buf):
	if ord(buf[i]) < 0x80:
		sys.stdout.write(buf[i])
		i += 1
	else:
		assert i+1 < len(buf)
		code = (ord(buf[i]) << 8) | ord(buf[i+1])
		if not big5.has_key(code):
			sys.stdout.write('<?%04X>' % code)
			print >> sys.stderr, '<?%04X>' % code
		else:
			sys.stdout.write(buf[i:i+2])
		i += 2
